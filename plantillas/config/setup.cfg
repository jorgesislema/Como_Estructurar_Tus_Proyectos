# Históricamente, setup.cfg era un archivo muy importante en el ecosistema Python, utilizado por setuptools para definir metadatos del paquete (nombre, versión, autor), opciones de build, dependencias y también para configurar algunas herramientas de desarrollo.

Sin embargo, con la estandarización y adopción de pyproject.toml (gracias a PEP 518, PEP 621 y otras), el rol de setup.cfg ha disminuido considerablemente, especialmente para proyectos nuevos. La recomendación moderna es definir la mayor parte de esta configuración directamente en pyproject.toml.

    Metadatos: Se definen en la tabla [project] de pyproject.toml (PEP 621).
    Sistema de Build: Se define en la tabla [build-system] de pyproject.toml (PEP 518).
    Dependencias: Se definen en [project].dependencies y [project].optional-dependencies en pyproject.toml.
    Puntos de Entrada: Se definen en [project].scripts, [project].gui-scripts, [project].entry-points en pyproject.toml.
    Configuración de Herramientas: La mayoría de las herramientas modernas (Ruff, Mypy, Pytest, Black, isort, Coverage.py, etc.) ahora leen su configuración desde la tabla [tool.*] en pyproject.toml.

¿Cuándo podrías necesitar aún setup.cfg?

    Estás trabajando en un proyecto legacy que aún no ha migrado completamente a pyproject.toml.
    Utilizas setuptools como backend de build y necesitas configurar opciones específicas de setuptools que no tienen un equivalente directo en pyproject.toml (aunque esto es cada vez menos común).
    Utilizas alguna herramienta de desarrollo más antigua que solo lee su configuración desde setup.cfg y no soporta pyproject.toml (ej: flake8 tradicionalmente, aunque hoy en día muchos prefieren ruff que sí usa pyproject.toml).

Plantilla Mínima/Histórica (plantillas/CONFIG/setup.cfg)

Dado el contexto moderno, te proporciono una plantilla mínima que incluye secciones que podrían seguir siendo relevantes si usas setuptools o herramientas más antiguas, pero con comentarios indicando la preferencia por pyproject.toml.

# setup.cfg template
# ------------------
# Archivo de configuración tradicional para setuptools.
# IMPORTANTE: Para proyectos nuevos, la mayoría de esta configuración
# ahora se recomienda definirla en 'pyproject.toml' (PEP 621, PEP 518).
# Usa este archivo principalmente si necesitas configurar opciones específicas
# de setuptools no disponibles en pyproject.toml o para herramientas legacy.

[metadata]
# ¡DEPRECADO! Usa la tabla [project] en pyproject.toml (PEP 621).
# name = mi_paquete
# version = 0.1.0
# description = Mi increíble paquete Python
# license_files = LICENSE

[options]
# Opciones generales para setuptools

# Encuentra paquetes automáticamente (muy común)
# Busca paquetes (directorios con __init__.py) bajo el directorio especificado
# en [options.packages.find].where (usualmente 'src').
packages = find:

# Requerimientos de Python (También se puede definir en pyproject.toml)
python_requires = >=3.8

# Dependencias principales (¡DEPRECADO! Usa [project].dependencies en pyproject.toml)
# install_requires =
#     requests>=2.20
#     pandas

# Incluir archivos no-código definidos en MANIFEST.in
include_package_data = True

# Si usas el layout src/ (recomendado)
package_dir =
    = src

[options.packages.find]
# Dónde buscar los paquetes especificados en `packages = find:`
where = src # Asume que tu código está en src/nombre_paquete

[options.extras_require]
# Dependencias opcionales (¡DEPRECADO! Usa [project].optional-dependencies en pyproject.toml)
# test =
#   pytest>=7.0
#   pytest-cov
# dev =
#   %(test)s # Incluye las dependencias de test
#   ruff
#   mypy

[options.entry_points]
# Puntos de entrada (¡DEPRECADO! Usa [project].scripts, etc. en pyproject.toml)
# console_scripts =
#   mi-cli = mi_paquete.cli:main

# --- Configuración de Herramientas (Ejemplo con Flake8) ---
# Algunas herramientas antiguas leen de aquí, pero las modernas prefieren [tool.*] en pyproject.toml

[flake8]
# Ejemplo de configuración para Flake8 (Linter tradicional)
# Nota: Considera usar Ruff ([tool.ruff] en pyproject.toml) como alternativa moderna.
max-line-length = 88
# Ignorar reglas específicas. E203 es incompatible con Black. E501 es line-too-long (manejado por Black/Ruff Format).
extend-ignore = E203, E501
exclude =
    .git,
    __pycache__,
    build,
    dist,
    *.egg-info,
    venv,
    .venv,
    env,
    .tox,
    . DVC
# Puedes añadir más configuraciones de Flake8 aquí si lo usas.

# [mypy]
# (Mypy también puede leer de aquí, pero prefiere [tool.mypy] en pyproject.toml)

# [pytest]
# (pytest lee de aquí, pytest.ini, o [tool.pytest.ini_options] en pyproject.toml - esta última es preferida)

# --- Fin ---



En Resumen:

    Para nuevos proyectos Python, enfócate en tener un pyproject.toml completo y bien configurado.
    Usa setup.cfg solo si es estrictamente necesario por compatibilidad con herramientas antiguas o para opciones muy específicas de setuptools.
    Evita duplicar metadatos o configuración de dependencias entre pyproject.toml y setup.cfg. Dale prioridad a pyproject.toml.